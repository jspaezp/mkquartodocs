{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#mkquartodocs","title":"mkquartodocs","text":"<p>Make gorgeous reproducible documentation with quarto and mkdocs</p> <p>It is a plugin for mkdocs that renders quarto markdown documents into github, so they are built with the rest of the documentation.</p>"},{"location":"#why","title":"Why?","text":"<p>In many instances the documentation contains runnable code, and it makes sense that you verify that the code runs and keep the output of the code in sync with the current status of the document and software packages involved.</p> <p>But mainly I really got tired of manually rendering documents and copying outpus.</p>"},{"location":"#usage","title":"Usage","text":"<ol> <li>Install the dependencies: Installation</li> <li>Add the plugin to your configuration:     Configuration</li> <li>Add <code>.qmd</code> files to your <code>./docs/</code> directoy</li> <li>Run <code>mkdocs build</code></li> </ol> <p>This will render code chunks and save the outputs! Check out https://quarto.org/ for more examples on how to use the format.</p> <p>This ....</p> <pre><code>```{python}\nprint(1+2)\n```\n</code></pre> <p>Will become this ...</p> <pre><code>print(1+2)\n</code></pre> output <pre><code>3\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<ol> <li> <p>Make sure you have quarto installed in your computer.</p> <ul> <li>https://quarto.org/docs/get-started/</li> </ul> </li> <li> <p>Install <code>mkquartodocs</code></p> </li> </ol> <pre><code>pip install mkquartodocs\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>Add <code>mkquartodocs</code> to your plugins in your <code>mkdocs.yml</code></p> <pre><code># Whatever is in your mkdocs.yml configuration file....\n# ...\n\nplugins:\n  - mkquartodocs\n</code></pre> <p>Available configuration options:</p> <ul> <li>quarto_path: Specifies where to look for the quarto executable.</li> <li>keep_output: If true it will skip the cleanup step in the     directory.</li> <li>ignore_pattern: a python regular expressions that if matched     will mark the file to not be rendered. Note that they need to be     full matches</li> <li>force_rebuild: If true it will force a rebuild of the quarto     documents (instead of trying to skip the document if the .md already     exists)</li> </ul> <pre><code># Whatever is in your mkdocs.yml configuration file....\n# ...\n\nplugins:\n  - mkquartodocs:\n      quarto_path: /home/my_folder/some/weird/place/to/have/executables/quarto\n      keep_output: true\n      ignore: (.*broken.*.qmd)|(.*page[0-9].qmd)\n\n# mkquartodocs will try to render every quarto document in the\n# docs directory, you can specify the page names using either the .qmd\n# or the .md extension\n\nnav:\n  - Home: README.md\n  - Examples:\n    - 'Simple python execution': 'examples/example.qmd'\n    - 'Simple dataframe execution': 'examples/dataframe_example.qmd'\n    - 'Simple mermaid execution': 'examples/mermaid_example.qmd'\n    - 'Simple matplotlib execution': 'examples/matplotlib_example.qmd'\n\n\n# These are also required depending on what features you want enabled.\ntheme:\n  name: material\n\nmarkdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.superfences\n</code></pre>"},{"location":"#running","title":"Running","text":"<p>NOTHING !!! you do not have to run it manually!!</p> <p>When you call <code>mkdocs build</code>, it should automatically find your <code>.qmd</code> files, render them, generate the output and clean after itself.</p>"},{"location":"#todo","title":"TODO","text":"<p>The things that need to/could be added to the project:</p> <ul> <li>[ ] quarto project support</li> <li>[ ] render in temporary directory, posibly with a 'safe' argument</li> <li>[ ] addition of files not in the docs directory, 'include' argument</li> <li>[ ] add readme to testing data</li> <li>[ ] move     <code>INFO     -  mkquartodocs: Running RemoveCellDataPreprocessor</code> to     debug log</li> </ul>"},{"location":"examples/dataframe_example/","title":"This is an example with a dataframe","text":"<p>Lets check the contents of this file!</p> <pre><code>with open(\"dataframe_example.qmd\", \"r\") as f:\n    for l in f:\n        print(str(l).strip())\n</code></pre> output <pre><code># This is an example with a dataframe\n\nLets check the contents of this file!\n\n```{python}\nwith open(\"dataframe_example.qmd\", \"r\") as f:\nfor l in f:\nprint(str(l).strip())\n\n```\n\n```{python}\nimport pandas as pd\n\npd.DataFrame([\nrange(10),\nrange(10, 20),\n])\n```\n\n```{python}\n# Fizz buzz as a simple list comprehension\nout = [\"Fizz\"*(i%3==0)+\"Buzz\"*(i%5==0) or str(i) for i in range(1, 101)]\nprint(out)\n```\n</code></pre> <pre><code>import pandas as pd\n\npd.DataFrame([\n  range(10),\n  range(10, 20),\n])\n</code></pre> Display <p> 0 1 2 3 4 5 6 7 8 9 0 0 1 2 3 4 5 6 7 8 9 1 10 11 12 13 14 15 16 17 18 19 <pre><code># Fizz buzz as a simple list comprehension\nout = [\"Fizz\"*(i%3==0)+\"Buzz\"*(i%5==0) or str(i) for i in range(1, 101)]\nprint(out)\n</code></pre> output <pre><code>['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz']\n</code></pre>"},{"location":"examples/example/","title":"This is a simple example that uses python","text":"<p>You can take a look at the .qmd that generated this docs from:</p> <p>https://github.com/jspaezp/mkquartodocs/tree/main/docs</p> <p>But we can use python to check the contents of this file!</p> <pre><code>with open(\"example.qmd\", \"r\") as f:\n    for l in f:\n        print(str(l).strip())\n</code></pre> output <pre><code># This is a simple example that uses python\n\nYou can take a look at the .qmd that generated this docs\nfrom:\n\n[https://github.com/jspaezp/mkquartodocs/tree/main/docs](https://github.com/jspaezp/mkquartodocs/tree/main/docs)\n\nBut we can use python to check the contents of this file!\n\n```{python}\nwith open(\"example.qmd\", \"r\") as f:\nfor l in f:\nprint(str(l).strip())\n\n```\n\n# Hello\n\nHere is some text\n\n```{python}\nprint(\"Hello World\")\n```\n\nHere is how warnings look\n\n```{python}\nimport warnings\nwarnings.warn(\"This is a warning\")\n```\n\nSome python logic\n\n```{python}\n# Fizz buzz as a simple list comprehension\nout = [\"Fizz\"*(i%3==0)+\"Buzz\"*(i%5==0) or str(i) for i in range(1, 101)]\nprint(out)\n```\n\nSome pretty pritnting\n\n```{python}\nfrom pprint import pprint\npprint(out)\n```\n\nAnd finally an error just to see how it looks\n\n```{python}\n#| error: true\nraise NotImplementedError\n```\n</code></pre>"},{"location":"examples/example/#hello","title":"Hello","text":"<p>Here is some text</p> <pre><code>print(\"Hello World\")\n</code></pre> output <pre><code>Hello World\n</code></pre> <p>Here is how warnings look</p> <pre><code>import warnings\nwarnings.warn(\"This is a warning\")\n</code></pre> stderr <pre><code>/tmp/ipykernel_2661/1338237052.py:2: UserWarning: This is a warning\n  warnings.warn(\"This is a warning\")\n</code></pre> <p>Some python logic</p> <pre><code># Fizz buzz as a simple list comprehension\nout = [\"Fizz\"*(i%3==0)+\"Buzz\"*(i%5==0) or str(i) for i in range(1, 101)]\nprint(out)\n</code></pre> output <pre><code>['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'FizzBuzz', '31', '32', 'Fizz', '34', 'Buzz', 'Fizz', '37', '38', 'Fizz', 'Buzz', '41', 'Fizz', '43', '44', 'FizzBuzz', '46', '47', 'Fizz', '49', 'Buzz', 'Fizz', '52', '53', 'Fizz', 'Buzz', '56', 'Fizz', '58', '59', 'FizzBuzz', '61', '62', 'Fizz', '64', 'Buzz', 'Fizz', '67', '68', 'Fizz', 'Buzz', '71', 'Fizz', '73', '74', 'FizzBuzz', '76', '77', 'Fizz', '79', 'Buzz', 'Fizz', '82', '83', 'Fizz', 'Buzz', '86', 'Fizz', '88', '89', 'FizzBuzz', '91', '92', 'Fizz', '94', 'Buzz', 'Fizz', '97', '98', 'Fizz', 'Buzz']\n</code></pre> <p>Some pretty pritnting</p> <pre><code>from pprint import pprint\npprint(out)\n</code></pre> output <pre><code>['1',\n '2',\n 'Fizz',\n '4',\n 'Buzz',\n 'Fizz',\n '7',\n '8',\n 'Fizz',\n 'Buzz',\n '11',\n 'Fizz',\n '13',\n '14',\n 'FizzBuzz',\n '16',\n '17',\n 'Fizz',\n '19',\n 'Buzz',\n 'Fizz',\n '22',\n '23',\n 'Fizz',\n 'Buzz',\n '26',\n 'Fizz',\n '28',\n '29',\n 'FizzBuzz',\n '31',\n '32',\n 'Fizz',\n '34',\n 'Buzz',\n 'Fizz',\n '37',\n '38',\n 'Fizz',\n 'Buzz',\n '41',\n 'Fizz',\n '43',\n '44',\n 'FizzBuzz',\n '46',\n '47',\n 'Fizz',\n '49',\n 'Buzz',\n 'Fizz',\n '52',\n '53',\n 'Fizz',\n 'Buzz',\n '56',\n 'Fizz',\n '58',\n '59',\n 'FizzBuzz',\n '61',\n '62',\n 'Fizz',\n '64',\n 'Buzz',\n 'Fizz',\n '67',\n '68',\n 'Fizz',\n 'Buzz',\n '71',\n 'Fizz',\n '73',\n '74',\n 'FizzBuzz',\n '76',\n '77',\n 'Fizz',\n '79',\n 'Buzz',\n 'Fizz',\n '82',\n '83',\n 'Fizz',\n 'Buzz',\n '86',\n 'Fizz',\n '88',\n '89',\n 'FizzBuzz',\n '91',\n '92',\n 'Fizz',\n '94',\n 'Buzz',\n 'Fizz',\n '97',\n '98',\n 'Fizz',\n 'Buzz']\n</code></pre> <p>And finally an error just to see how it looks</p> <pre><code>raise NotImplementedError\n</code></pre> error <pre><code>NotImplementedError: \n\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mNotImplementedError\u001b[39m                       Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[6]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----&gt; \u001b[39m\u001b[32m1\u001b[39m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mNotImplementedError\u001b[39;00m\n\n\u001b[31mNotImplementedError\u001b[39m:\n</code></pre>"},{"location":"examples/matplotlib_example/","title":"This is a matplotlib example","text":"<p>Lets check the contents of this file!</p> <pre><code>with open(\"matplotlib_example.qmd\", \"r\") as f:\n    for l in f:\n        print(str(l).strip())\n</code></pre> output <pre><code># This is a matplotlib example\n\nLets check the contents of this file!\n\n```{python}\nwith open(\"matplotlib_example.qmd\", \"r\") as f:\nfor l in f:\nprint(str(l).strip())\n\n```\n\n```{python}\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nplt.style.use('_mpl-gallery')\n\n# Make data\nn = 20\nx = np.sin(np.linspace(0, 2*np.pi, n))\ny = np.cos(np.linspace(0, 2*np.pi, n))\nz = np.linspace(0, 1, n)\n\n# Plot\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\nax.stem(x, y, z)\n\nax.set(xticklabels=[],\nyticklabels=[],\nzticklabels=[])\n\nplt.show()\n```\n</code></pre> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\nplt.style.use('_mpl-gallery')\n\n# Make data\nn = 20\nx = np.sin(np.linspace(0, 2*np.pi, n))\ny = np.cos(np.linspace(0, 2*np.pi, n))\nz = np.linspace(0, 1, n)\n\n# Plot\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\nax.stem(x, y, z)\n\nax.set(xticklabels=[],\n       yticklabels=[],\n       zticklabels=[])\n\nplt.show()\n</code></pre> Display <p></p>"},{"location":"examples/mermaid_example/","title":"This is a mermaid example","text":"Note <p><code>&lt;figure class=''&gt;</code>{=html}</p> <p>{width=\"2.17in\" height=\"2.9in\"}</p> <p><code>&lt;/figure&gt;</code>{=html}</p>"}]}